{"version":3,"sources":["components/MyNavBar/index.jsx","components/MyNavBar/index.module.css","pages/Login/index.module.css","pages/Login/index.jsx"],"names":["withRouter","children","className","history","rightContent","onLeftClick","styles","navbar","join","mode","icon","goBack","module","exports","Login","root","navHeader","size","form","formItem","input","name","placeholder","error","component","type","formSubmit","submit","backHome","Item","to","withFormik","mapPropsToValues","username","password","validationSchema","yup","shape","required","matches","handleSubmit","values","a","props","API","post","res","data","status","body","description","localStorage","setItem","token","location","state","replace","from","pathname","info"],"mappings":"uLA6BeA,iBAxBf,YAMI,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,UACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,aACAC,EACC,EADDA,YAIA,OACE,8BACE,mBACEH,UAAW,CAACI,IAAOC,OAAQL,GAAa,IAAIM,KAAK,KACjDC,KAAK,QACLC,KAAM,mBAAGR,UAAU,uBACnBG,YAAaA,GAPE,kBAAMF,EAAQQ,UAQ7BP,aAAcA,EALhB,SAOGH,U,oBCtBTW,EAAOC,QAAU,CAAC,OAAS,2B,oBCA3BD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,SAAW,wBAAwB,KAAO,oBAAoB,SAAW,wBAAwB,MAAQ,qBAAqB,OAAS,sBAAsB,MAAQ,uB,sPCiBvP,SAASC,IACP,OACE,sBAAKZ,UAAWI,IAAOS,KAAvB,UACE,cAAC,IAAD,CAAUb,UAAWI,IAAOU,UAA5B,sCACA,mBAAYC,KAAK,OAIjB,8BACE,eAAC,IAAD,CAAMf,UAAWI,IAAOY,KAAxB,UACE,qBAAKhB,UAAWI,IAAOa,SAAvB,SACE,cAAC,IAAD,CACEjB,UAAWI,IAAOc,MAClBC,KAAK,WACLC,YAAY,qCAGhB,cAAC,IAAD,CACEpB,UAAWI,IAAOiB,MAClBF,KAAK,WACLG,UAAU,QAEZ,qBAAKtB,UAAWI,IAAOa,SAAvB,SACE,cAAC,IAAD,CACEjB,UAAWI,IAAOc,MAClBC,KAAK,WACLI,KAAK,WACLH,YAAY,qCAGhB,cAAC,IAAD,CACEpB,UAAWI,IAAOiB,MAClBF,KAAK,WACLG,UAAU,QAEZ,qBAAKtB,UAAWI,IAAOoB,WAAvB,SACE,wBAAQxB,UAAWI,IAAOqB,OAAQF,KAAK,SAAvC,gCAKJ,mBAAMvB,UAAWI,IAAOsB,SAAxB,SACE,kBAAMC,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,YAAT,wEAQZhB,EAAQiB,YAAW,CAEjBC,iBAAkB,iBAAO,CAAEC,SAAU,GAAIC,SAAU,KAEnDC,iBAAkBC,MAAaC,MAAM,CACnCJ,SAAUG,MAEPE,SAAS,4BACTC,QA7DW,qBA6DQ,qIACtBL,SAAUE,MAEPE,SAAS,4BACTC,QAhES,sBAgEQ,wIAGtBC,aAAa,WAAD,4BAAE,WAAOC,EAAP,gCAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,MAErBV,EAAuBQ,EAAvBR,SAAUC,EAAaO,EAAbP,SAFN,SAGMU,IAAIC,KAAK,cAAe,CACxCZ,WACAC,aALU,OAGNY,EAHM,SAS0BA,EAAIC,KAAlCC,EATI,EASJA,OAAQC,EATJ,EASIA,KAAMC,EATV,EASUA,YACP,MAAXF,GAGFG,aAAaC,QAAQ,YAAaH,EAAKI,OAClCV,EAAMW,SAASC,MAKlBZ,EAAMxC,QAAQqD,QAAQb,EAAMW,SAASC,MAAME,KAAKC,UAHhDf,EAAMxC,QAAQQ,UAOhB,IAAMgD,KAAKT,EAAa,EAAG,MAAM,GAvBvB,2CAAF,qDAAC,IAfPnB,CAyCLjB,GACYA","file":"static/js/21.d8be0464.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { NavBar } from \"antd-mobile\";\r\nimport styles from \"./index.module.css\";\r\n\r\nfunction MyNavBar({ \r\n  children,\r\n  className,\r\n  history,\r\n  rightContent,\r\n  onLeftClick \r\n}) {\r\n  // 默认点击返回按钮事件\r\n  const defaultClick = () => history.goBack();\r\n  return (\r\n    <div>\r\n      <NavBar\r\n        className={[styles.navbar, className || \"\"].join(\" \")}\r\n        mode=\"light\"\r\n        icon={<i className=\"iconfont icon-back\" />}\r\n        onLeftClick={onLeftClick || defaultClick}\r\n        rightContent={rightContent}\r\n      >\r\n        {children}\r\n      </NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyNavBar);\r\n/* \r\n此组件用于封装顶部导航栏\r\n只有路由组件才有history 等API\r\n于是， 利用 withRouter（）函数 包裹一般组件，就可以把一般组件变成路由组件 \r\n*/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"MyNavBar_navbar__2081X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Login_root__2HFAc\",\"navHeader\":\"Login_navHeader__1fZZr\",\"backHome\":\"Login_backHome__rTAMO\",\"form\":\"Login_form__28s2h\",\"formItem\":\"Login_formItem__1RNI5\",\"input\":\"Login_input__MR2E9\",\"submit\":\"Login_submit__2qzEM\",\"error\":\"Login_error__3qdZV\"};","import React from \"react\";\r\n\r\nimport { Flex, WingBlank, WhiteSpace, Toast } from \"antd-mobile\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n// 引入withFormik高阶组件，用于表单校验\r\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\r\n// 导入yup\r\nimport * as yup from \"yup\";\r\n\r\nimport API from \"../../utils/api\";\r\nimport MyNavBar from \"../../components/MyNavBar\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\n// 校验规则\r\nconst REG_UNAME = /^[a-zA-Z_\\d]{5,8}$/;\r\nconst REG_PWD = /^[a-zA-Z_\\d]{5,12}$/;\r\nfunction Login() {\r\n  return (\r\n    <div className={styles.root}>\r\n      <MyNavBar className={styles.navHeader}>账号登录</MyNavBar>\r\n      <WhiteSpace size=\"x1\" />\r\n\r\n      {/* 登录表单 */}\r\n      {/* 左右留白 */}\r\n      <WingBlank>\r\n        <Form className={styles.form}>\r\n          <div className={styles.formItem}>\r\n            <Field\r\n              className={styles.input}\r\n              name=\"username\"\r\n              placeholder=\"请输入账号\"\r\n            ></Field>\r\n          </div>\r\n          <ErrorMessage\r\n            className={styles.error}\r\n            name=\"username\"\r\n            component=\"div\"\r\n          ></ErrorMessage>\r\n          <div className={styles.formItem}>\r\n            <Field\r\n              className={styles.input}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"请输入密码\"\r\n            ></Field>\r\n          </div>\r\n          <ErrorMessage\r\n            className={styles.error}\r\n            name=\"password\"\r\n            component=\"div\"\r\n          ></ErrorMessage>\r\n          <div className={styles.formSubmit}>\r\n            <button className={styles.submit} type=\"submit\">\r\n              登 录\r\n            </button>\r\n          </div>\r\n        </Form>\r\n        <Flex className={styles.backHome}>\r\n          <Flex.Item>\r\n            <Link to=\"/register\">没有账号？去注册</Link>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </WingBlank>\r\n    </div>\r\n  );\r\n}\r\n\r\nLogin = withFormik({\r\n  // 为Login组件提供状态\r\n  mapPropsToValues: () => ({ username: \"\", password: \"\" }),\r\n  // 添加校验规则\r\n  validationSchema: yup.object().shape({\r\n    username: yup\r\n      .string()\r\n      .required(\"账号必填\")\r\n      .matches(REG_UNAME, \"账号长度为5~8位，只能由数字、字母、下划线组成\"),\r\n    password: yup\r\n      .string()\r\n      .required(\"密码必填\")\r\n      .matches(REG_PWD, \"密码长度为5~12位，只能由数字、字母、下划线组成\"),\r\n  }),\r\n  // 为Login提供表单提交方法\r\n  handleSubmit: async (values, { props }) => {\r\n    // 获取账号、密码\r\n    const { username, password } = values;\r\n    const res = await API.post(\"/user/login\", {\r\n      username,\r\n      password,\r\n    });\r\n\r\n    // 获取返回数据\r\n    const { status, body, description } = res.data;\r\n    if (status === 200) {\r\n      // 登录成功\r\n      // 将token存储到本地\r\n      localStorage.setItem(\"zfy_token\", body.token);\r\n      if (!props.location.state) {\r\n        // 用户想登录之后返回之前页面\r\n        props.history.goBack();\r\n      } else {\r\n        // 用户想登录之后直接跳转到指定页面\r\n        props.history.replace(props.location.state.from.pathname);\r\n      }\r\n    } else {\r\n      // 登录失败\r\n      Toast.info(description, 2, null, false);\r\n    }\r\n  },\r\n})(Login);\r\nexport default Login;\r\n"],"sourceRoot":""}