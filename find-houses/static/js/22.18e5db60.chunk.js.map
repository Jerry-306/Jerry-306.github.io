{"version":3,"sources":["components/MyNavBar/index.jsx","components/MyNavBar/index.module.css","pages/Register/index.module.css","pages/Register/index.jsx"],"names":["withRouter","children","className","history","rightContent","onLeftClick","styles","navbar","join","mode","icon","goBack","module","exports","alert","Register","root","navHeader","size","form","formItem","input","name","placeholder","error","component","type","formSubmit","submit","withFormik","mapPropsToValues","username","password","validationSchema","yup","shape","required","matches","handleSubmit","values","a","props","API","post","res","data","status","description","text","onPress","info"],"mappings":"uKA6BeA,iBAxBf,YAMI,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,UACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,aACAC,EACC,EADDA,YAIA,OACE,8BACE,mBACEH,UAAW,CAACI,IAAOC,OAAQL,GAAa,IAAIM,KAAK,KACjDC,KAAK,QACLC,KAAM,mBAAGR,UAAU,uBACnBG,YAAaA,GAPE,kBAAMF,EAAQQ,UAQ7BP,aAAcA,EALhB,SAOGH,U,oBCtBTW,EAAOC,QAAU,CAAC,OAAS,2B,oBCA3BD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,UAAY,4BAA4B,KAAO,uBAAuB,SAAW,2BAA2B,MAAQ,wBAAwB,OAAS,yBAAyB,MAAQ,0B,iPCahOC,EAAQ,IAAMA,MACpB,SAASC,IACP,OACE,sBAAKb,UAAWI,IAAOU,KAAvB,UACE,cAAC,IAAD,CAAUd,UAAWI,IAAOW,UAA5B,sCACA,mBAAYC,KAAK,OAIjB,4BACE,eAAC,IAAD,CAAMhB,UAAWI,IAAOa,KAAxB,UACE,qBAAKjB,UAAWI,IAAOc,SAAvB,SACE,cAAC,IAAD,CACElB,UAAWI,IAAOe,MAClBC,KAAK,WACLC,YAAY,qCAGhB,cAAC,IAAD,CACErB,UAAWI,IAAOkB,MAClBF,KAAK,WACLG,UAAU,QAEZ,qBAAKvB,UAAWI,IAAOc,SAAvB,SACE,cAAC,IAAD,CACElB,UAAWI,IAAOe,MAClBC,KAAK,WACLI,KAAK,WACLH,YAAY,qCAGhB,cAAC,IAAD,CACErB,UAAWI,IAAOkB,MAClBF,KAAK,WACLG,UAAU,QAEZ,qBAAKvB,UAAWI,IAAOqB,WAAvB,SACE,wBAAQzB,UAAWI,IAAOsB,OAAQF,KAAK,SAAvC,qCAUZX,EAAWc,YAAW,CAEpBC,iBAAkB,iBAAO,CAAEC,SAAU,GAAIC,SAAU,KAEnDC,iBAAkBC,MAAaC,MAAM,CACnCJ,SAAUG,MAEPE,SAAS,4BACTC,QA1DW,qBA0DQ,qIACtBL,SAAUE,MAEPE,SAAS,4BACTC,QA7DS,sBA6DQ,wIAGtBC,aAAa,WAAD,4BAAE,WAAOC,EAAP,8BAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,MAErBV,EAAuBQ,EAAvBR,SAAUC,EAAaO,EAAbP,SAFN,SAGMU,IAAIC,KAAK,mBAAoB,CAC7CZ,WACAC,aALU,OAGNY,EAHM,SASoBA,EAAIC,KAA5BC,EATI,EASJA,OAAQC,EATJ,EASIA,YACD,MAAXD,EAEFhC,EAAM,eAAM,2EAAgB,CAC1B,CAAEkC,KAAM,gBACR,CAAEA,KAAM,eAAMC,QAAS,kBAAMR,EAAMtC,QAAQQ,aAI7C,IAAMuC,KAAKH,EAAa,EAAG,MAAM,GAlBvB,2CAAF,qDAAC,IAfJlB,CAoCRd,GACYA","file":"static/js/22.18e5db60.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { NavBar } from \"antd-mobile\";\r\nimport styles from \"./index.module.css\";\r\n\r\nfunction MyNavBar({ \r\n  children,\r\n  className,\r\n  history,\r\n  rightContent,\r\n  onLeftClick \r\n}) {\r\n  // 默认点击返回按钮事件\r\n  const defaultClick = () => history.goBack();\r\n  return (\r\n    <div>\r\n      <NavBar\r\n        className={[styles.navbar, className || \"\"].join(\" \")}\r\n        mode=\"light\"\r\n        icon={<i className=\"iconfont icon-back\" />}\r\n        onLeftClick={onLeftClick || defaultClick}\r\n        rightContent={rightContent}\r\n      >\r\n        {children}\r\n      </NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyNavBar);\r\n/* \r\n此组件用于封装顶部导航栏\r\n只有路由组件才有history 等API\r\n于是， 利用 withRouter（）函数 包裹一般组件，就可以把一般组件变成路由组件 \r\n*/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"MyNavBar_navbar__1MYpP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Register_root__2QmM0\",\"navHeader\":\"Register_navHeader__oOF8d\",\"form\":\"Register_form__azISF\",\"formItem\":\"Register_formItem__vhlPl\",\"input\":\"Register_input__3uWr9\",\"submit\":\"Register_submit__2by5l\",\"error\":\"Register_error__2NIXy\"};","import React from \"react\";\r\nimport { WingBlank, WhiteSpace, Toast, Modal } from \"antd-mobile\";\r\n// 引入withFormik高阶组件，用于表单校验\r\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\r\n// 导入yup\r\nimport * as yup from \"yup\";\r\nimport API from \"../../utils/api\";\r\nimport MyNavBar from \"../../components/MyNavBar\";\r\nimport styles from \"./index.module.css\";\r\n\r\n// 校验规则\r\nconst REG_UNAME = /^[a-zA-Z_\\d]{5,8}$/;\r\nconst REG_PWD = /^[a-zA-Z_\\d]{5,12}$/;\r\n\r\nconst alert = Modal.alert;\r\nfunction Register() {\r\n  return (\r\n    <div className={styles.root}>\r\n      <MyNavBar className={styles.navHeader}>账号注册</MyNavBar>\r\n      <WhiteSpace size=\"x1\" />\r\n\r\n      {/* 注册表单 */}\r\n      {/* 左右留白 */}\r\n      <WingBlank>\r\n        <Form className={styles.form}>\r\n          <div className={styles.formItem}>\r\n            <Field\r\n              className={styles.input}\r\n              name=\"username\"\r\n              placeholder=\"请输入账号\"\r\n            ></Field>\r\n          </div>\r\n          <ErrorMessage\r\n            className={styles.error}\r\n            name=\"username\"\r\n            component=\"div\"\r\n          ></ErrorMessage>\r\n          <div className={styles.formItem}>\r\n            <Field\r\n              className={styles.input}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"请输入密码\"\r\n            ></Field>\r\n          </div>\r\n          <ErrorMessage\r\n            className={styles.error}\r\n            name=\"password\"\r\n            component=\"div\"\r\n          ></ErrorMessage>\r\n          <div className={styles.formSubmit}>\r\n            <button className={styles.submit} type=\"submit\">\r\n              注 册\r\n            </button>\r\n          </div>\r\n        </Form>\r\n      </WingBlank>\r\n    </div>\r\n  );\r\n}\r\n\r\nRegister = withFormik({\r\n  // 为Register组件提供状态\r\n  mapPropsToValues: () => ({ username: \"\", password: \"\" }),\r\n  // 添加校验规则\r\n  validationSchema: yup.object().shape({\r\n    username: yup\r\n      .string()\r\n      .required(\"账号必填\")\r\n      .matches(REG_UNAME, \"账号长度为5~8位，只能由数字、字母、下划线组成\"),\r\n    password: yup\r\n      .string()\r\n      .required(\"密码必填\")\r\n      .matches(REG_PWD, \"密码长度为5~12位，只能由数字、字母、下划线组成\"),\r\n  }),\r\n  // 为Register提供表单提交方法\r\n  handleSubmit: async (values, { props }) => {\r\n    // 获取账号、密码\r\n    const { username, password } = values;\r\n    const res = await API.post(\"/user/registered\", {\r\n      username,\r\n      password,\r\n    });\r\n\r\n    // 获取返回数据\r\n    const { status, description } = res.data;\r\n    if (status === 200) {\r\n      // 注册成功\r\n      alert(\"提示\", \"注册成功，返回登录页面？\", [\r\n        { text: \"取消\" },\r\n        { text: \"确定\", onPress: () => props.history.goBack() },\r\n      ]);\r\n    } else {\r\n      // 注册失败\r\n      Toast.info(description, 2, null, false);\r\n    }\r\n  },\r\n})(Register);\r\nexport default Register;\r\n"],"sourceRoot":""}