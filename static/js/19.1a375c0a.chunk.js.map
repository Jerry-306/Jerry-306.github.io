{"version":3,"sources":["components/MyNavBar/index.js","components/MyNavBar/index.module.css","../node_modules/antd-mobile/lib/nav-bar/style/css.js","../node_modules/antd-mobile/lib/nav-bar/index.js","pages/CityList/index.js"],"names":["MyNavBar","defaultClick","props","history","goBack","this","children","className","rightContent","onLeftClick","styles","navbar","join","mode","icon","Component","withRouter","module","exports","require","Object","defineProperty","value","_extends3","_interopRequireDefault","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_classnames2","React","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","_interopRequireWildcard","__rest","s","e","t","p","indexOf","getOwnPropertySymbols","i","length","NavBar","_React$Component","__proto__","getPrototypeOf","apply","arguments","_a","prefixCls","leftContent","restProps","createElement","role","onClick","defaultProps","formatCityData","list","cityIndex","cityList","forEach","item","firstStr","short","substr","push","keys","sort","formatCityIndex","letter","toUpperCase","CityList","state","activeIndex","rowRenderer","index","style","isScrolling","isVisible","map","changeCity","label","rowsRendered","startIndex","setState","getRowHeight","a","axios","get","res","data","body","hotCities","unshift","getCurrentCity","currentCity","cityListComponent","scrollToRow","city","localStorage","setItem","JSON","stringify","getCityList","measureAllRows","width","height","ref","c","rowCount","rowHeight","onRowsRendered","scrollToAlignment","renderCityIndex"],"mappings":"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","file":"static/js/19.1a375c0a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {withRouter} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport {NavBar} from 'antd-mobile'\r\nimport styles from './index.module.css'\r\n\r\nclass MyNavBar extends Component {\r\n    // 属性校验\r\n    static propTypes = {\r\n        children: PropTypes.string.isRequired,\r\n        onLeftClick: PropTypes.func,\r\n        className: PropTypes.string,\r\n        rightContent: PropTypes.array\r\n    }\r\n\r\n    // 默认点击返回按钮事件\r\n    defaultClick = () => this.props.history.goBack();\r\n    render() {\r\n        const {children, className, rightContent, onLeftClick} = this.props;\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    className={[styles.navbar, className || ''].join(' ')}\r\n                    mode=\"light\"\r\n                    icon={<i className=\"iconfont icon-back\"/>}\r\n                    onLeftClick={onLeftClick || this.defaultClick} \r\n                    rightContent={rightContent}\r\n                >\r\n                    {children}\r\n                </NavBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(MyNavBar);\r\n/* \r\n此组件用于封装顶部导航栏\r\n只有路由组件才有history 等API\r\n于是， 利用 withRouter（）函数 包裹一般组件，就可以把一般组件变成路由组件 \r\n*/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"MyNavBar_navbar__2I-jd\"};","'use strict';\n\nrequire('../../style/css');\n\nrequire('./index.css');","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n    var t = {};\n    for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    }if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n    }return t;\n};\n\nvar NavBar = function (_React$Component) {\n    (0, _inherits3['default'])(NavBar, _React$Component);\n\n    function NavBar() {\n        (0, _classCallCheck3['default'])(this, NavBar);\n        return (0, _possibleConstructorReturn3['default'])(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).apply(this, arguments));\n    }\n\n    (0, _createClass3['default'])(NavBar, [{\n        key: 'render',\n        value: function render() {\n            var _a = this.props,\n                prefixCls = _a.prefixCls,\n                className = _a.className,\n                children = _a.children,\n                mode = _a.mode,\n                icon = _a.icon,\n                onLeftClick = _a.onLeftClick,\n                leftContent = _a.leftContent,\n                rightContent = _a.rightContent,\n                restProps = __rest(_a, [\"prefixCls\", \"className\", \"children\", \"mode\", \"icon\", \"onLeftClick\", \"leftContent\", \"rightContent\"]);\n            return React.createElement(\n                'div',\n                (0, _extends3['default'])({}, restProps, { className: (0, _classnames2['default'])(className, prefixCls, prefixCls + '-' + mode) }),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-left', role: 'button', onClick: onLeftClick },\n                    icon ?\n                    // tslint:disable-next-line:jsx-no-multiline-js\n                    React.createElement(\n                        'span',\n                        { className: prefixCls + '-left-icon', 'aria-hidden': 'true' },\n                        icon\n                    ) : null,\n                    leftContent\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-title' },\n                    children\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-right' },\n                    rightContent\n                )\n            );\n        }\n    }]);\n    return NavBar;\n}(React.Component);\n\nexports['default'] = NavBar;\n\nNavBar.defaultProps = {\n    prefixCls: 'am-navbar',\n    mode: 'dark',\n    onLeftClick: function onLeftClick() {}\n};\nmodule.exports = exports['default'];","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {AutoSizer, List} from 'react-virtualized'\r\nimport MyNavBar from '../../components/MyNavBar'\r\nimport {getCurrentCity} from '../../utils'\r\nimport './index.css';\r\n\r\n// 城市数据格式化\r\nfunction formatCityData (list) {\r\n    let cityList = {};\r\n    let  cityIndex = [];\r\n    // 将城市列表list按照首字母进行分类\r\n    list.forEach(item => {\r\n        let firstStr = item.short.substr(0,1);\r\n        if (cityList[firstStr]) {\r\n            cityList[firstStr].push(item)\r\n        } else {\r\n            cityList[firstStr] = [item]\r\n        }\r\n    });\r\n    // 获取城市列表首字母数组\r\n    cityIndex = Object.keys(cityList).sort();\r\n\r\n    return {\r\n        cityList,\r\n        cityIndex\r\n    }\r\n}\r\n\r\n// 封装处理字母索引的方法\r\nfunction formatCityIndex (letter) {\r\n    switch (letter) {\r\n        case '#':\r\n            return '当前定位'\r\n        case 'hot':\r\n            return '热门城市'\r\n        default:\r\n            return letter.toUpperCase()\r\n    }\r\n}\r\n// 索引（A、B等）的高度\r\nconst TITLE_HEIGHT = 36;\r\n// 每个城市名称的高度\r\nconst NAME_HEIGHT = 50;\r\n// 目前有房源的城市\r\n// const HOUSE_CITIES = ['北京', '南京', '上海', '广州', '深圳'];\r\n\r\nexport default class CityList extends Component {\r\n    state = {\r\n        cityList: {},\r\n        cityIndex: [],\r\n        activeIndex: 0\r\n    }\r\n    // 获取城市列表数据\r\n    async getCityList () {\r\n        const res = await axios.get('http://localhost:8009/area/city?level=1');\r\n        const {cityList, cityIndex}  = formatCityData(res.data.body);\r\n\r\n        // 获取热门城市,并添加至数据中\r\n        const hotCities = await axios.get('http://localhost:8009/area/hot');\r\n        cityList['hot'] = hotCities.data.body;\r\n        cityIndex.unshift('hot');     \r\n        \r\n        // 获取当前定位城市\r\n        const currentCity = await getCurrentCity();\r\n        cityList['#'] = [currentCity];\r\n        cityIndex.unshift('#');\r\n\r\n        this.setState({\r\n            cityList,\r\n            cityIndex\r\n        })\r\n        // 数据结构：\r\n        // cityList: {\"#\": [{}, {}...], \"hot\": [{},...], \"a\": [{}, {},...], ...}\r\n        // cityIndex: [\"#\", \"hot\", \"a\",\"b\", \"c\",..., \"z\"]\r\n    }\r\n\r\n    // List组件渲染每一行的方法：\r\n    rowRenderer = ({\r\n        key, // Unique key within array of rows\r\n        index, // 索引号\r\n        isScrolling, // 当前项是否正在滚动中\r\n        isVisible, // 当前项在 List 中是可见的\r\n        style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n    }) => {\r\n        // 获取每一行的字母索引\r\n        const { cityIndex, cityList } = this.state;\r\n        // 字母索引\r\n        const letter = cityIndex[index];\r\n\r\n        return (\r\n            <div key={key} style={style} className=\"city\">\r\n                <div className=\"title\">{formatCityIndex(letter)}</div>\r\n                {\r\n                    // 渲染指定字母索引下的城市列表数据\r\n                    cityList[letter].map( item => (\r\n                        <div className=\"name\" key={item.value} onClick={() => this.changeCity(item)}>\r\n                            {item.label}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // 用于获取List 组件中渲染行的信息\r\n    rowsRendered = ({startIndex}) => {\r\n        // startIndex 当前城市列表顶部的索引号\r\n        if (startIndex !== this.state.activeIndex) {\r\n            this.setState({\r\n                activeIndex: startIndex\r\n            })\r\n        }\r\n    }\r\n\r\n    // 创建动态计算每一行高度的方法\r\n    getRowHeight = ({ index }) => {\r\n        // 索引标题高度 + 城市数量 * 城市名称的高度\r\n        // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n        const { cityList, cityIndex } = this.state\r\n        return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n    }\r\n\r\n    // 封装渲染右侧索引列表的方法\r\n    renderCityIndex() {\r\n        // 获取到 cityIndex，并遍历其，实现渲染\r\n        const { cityIndex, activeIndex } = this.state\r\n        return cityIndex.map((item, index) => (\r\n            <li\r\n                className=\"city-index-item\"\r\n                key={item}\r\n                onClick={() => {\r\n                    this.cityListComponent.scrollToRow(index)\r\n                }}\r\n            >\r\n                <span className={activeIndex === index ? 'index-active' : ''}>\r\n                {item === 'hot' ? '热' : item.toUpperCase()}\r\n                </span>\r\n            </li>\r\n        ))\r\n    }\r\n\r\n    // 点击切换城市\r\n    changeCity (city) {\r\n        const {label, value} = city;\r\n        // if (HOUSE_CITIES.includes(label)) {\r\n        //     // 将城市数据存储到本地\r\n        //     localStorage.setItem('zfy_city', JSON.stringify({label, value}));\r\n        //     this.props.history.goBack();\r\n        // } else {\r\n        //     Toast.info('该城市暂无房源', 1, null, false)\r\n        // }\r\n        localStorage.setItem('zfy_city', JSON.stringify({label, value}));\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    async componentDidMount () {\r\n        await this.getCityList();\r\n        /* 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\r\n        注意：调用这个方法的时候，需要保证 List 组件中已经有数据了！如果 List 组件中的数据为空，就会导致调用方法报错！\r\n        解决：只要保证这个方法是在 获取到数据之后 调用的即可。*/\r\n        this.cityListComponent.measureAllRows();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"citylist\">\r\n                <MyNavBar>\r\n                    城市选择\r\n                </MyNavBar>\r\n                {/* 城市列表 */}\r\n                <AutoSizer>\r\n                {({ width, height }) => (\r\n                    <List\r\n                    ref={(c) => this.cityListComponent = c}\r\n                    width={width}\r\n                    height={height}\r\n                    rowCount={this.state.cityIndex.length}\r\n                    rowHeight={this.getRowHeight}\r\n                    rowRenderer={this.rowRenderer}\r\n                    onRowsRendered={this.rowsRendered}\r\n                    scrollToAlignment=\"start\"\r\n                    />\r\n                )}\r\n                </AutoSizer>\r\n                {/* 右侧索引列表 */}\r\n                <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}