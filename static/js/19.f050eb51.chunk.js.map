{"version":3,"sources":["components/MyNavBar/index.jsx","components/MyNavBar/index.module.css","../node_modules/antd-mobile/lib/nav-bar/style/css.js","../node_modules/antd-mobile/lib/nav-bar/index.js","pages/CityList/index.jsx"],"names":["withRouter","children","className","history","rightContent","onLeftClick","styles","navbar","join","mode","icon","goBack","module","exports","require","Object","defineProperty","value","_extends3","_interopRequireDefault","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_classnames2","React","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","_interopRequireWildcard","__rest","s","e","t","p","indexOf","getOwnPropertySymbols","i","length","NavBar","_React$Component","this","__proto__","getPrototypeOf","apply","arguments","_a","props","prefixCls","leftContent","restProps","createElement","role","onClick","Component","defaultProps","formatCityData","list","cityIndex","cityList","forEach","item","firstStr","short","substr","push","keys","sort","formatCityIndex","letter","toUpperCase","CityList","useState","setcityList","setcityIndex","activeIndex","setactiveIndex","cityListComponent","useRef","useEffect","getCityList","a","API","get","res","data","body","hotCities","unshift","getCurrentCity","currentCity","current","measureAllRows","rowRenderer","index","style","map","changeCity","label","rowsRendered","startIndex","getRowHeight","city","localStorage","setItem","JSON","stringify","width","height","ref","rowCount","rowHeight","onRowsRendered","scrollToAlignment","scrollToRow"],"mappings":"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","file":"static/js/19.f050eb51.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { NavBar } from \"antd-mobile\";\r\nimport styles from \"./index.module.css\";\r\n\r\nfunction MyNavBar({ \r\n  children,\r\n  className,\r\n  history,\r\n  rightContent,\r\n  onLeftClick \r\n}) {\r\n  // 默认点击返回按钮事件\r\n  const defaultClick = () => history.goBack();\r\n  return (\r\n    <div>\r\n      <NavBar\r\n        className={[styles.navbar, className || \"\"].join(\" \")}\r\n        mode=\"light\"\r\n        icon={<i className=\"iconfont icon-back\" />}\r\n        onLeftClick={onLeftClick || defaultClick}\r\n        rightContent={rightContent}\r\n      >\r\n        {children}\r\n      </NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyNavBar);\r\n/* \r\n此组件用于封装顶部导航栏\r\n只有路由组件才有history 等API\r\n于是， 利用 withRouter（）函数 包裹一般组件，就可以把一般组件变成路由组件 \r\n*/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"MyNavBar_navbar__1MYpP\"};","'use strict';\n\nrequire('../../style/css');\n\nrequire('./index.css');","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n    var t = {};\n    for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    }if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n    }return t;\n};\n\nvar NavBar = function (_React$Component) {\n    (0, _inherits3['default'])(NavBar, _React$Component);\n\n    function NavBar() {\n        (0, _classCallCheck3['default'])(this, NavBar);\n        return (0, _possibleConstructorReturn3['default'])(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).apply(this, arguments));\n    }\n\n    (0, _createClass3['default'])(NavBar, [{\n        key: 'render',\n        value: function render() {\n            var _a = this.props,\n                prefixCls = _a.prefixCls,\n                className = _a.className,\n                children = _a.children,\n                mode = _a.mode,\n                icon = _a.icon,\n                onLeftClick = _a.onLeftClick,\n                leftContent = _a.leftContent,\n                rightContent = _a.rightContent,\n                restProps = __rest(_a, [\"prefixCls\", \"className\", \"children\", \"mode\", \"icon\", \"onLeftClick\", \"leftContent\", \"rightContent\"]);\n            return React.createElement(\n                'div',\n                (0, _extends3['default'])({}, restProps, { className: (0, _classnames2['default'])(className, prefixCls, prefixCls + '-' + mode) }),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-left', role: 'button', onClick: onLeftClick },\n                    icon ?\n                    // tslint:disable-next-line:jsx-no-multiline-js\n                    React.createElement(\n                        'span',\n                        { className: prefixCls + '-left-icon', 'aria-hidden': 'true' },\n                        icon\n                    ) : null,\n                    leftContent\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-title' },\n                    children\n                ),\n                React.createElement(\n                    'div',\n                    { className: prefixCls + '-right' },\n                    rightContent\n                )\n            );\n        }\n    }]);\n    return NavBar;\n}(React.Component);\n\nexports['default'] = NavBar;\n\nNavBar.defaultProps = {\n    prefixCls: 'am-navbar',\n    mode: 'dark',\n    onLeftClick: function onLeftClick() {}\n};\nmodule.exports = exports['default'];","// import React, { Component } from 'react';\r\n// import {AutoSizer, List} from 'react-virtualized';\r\n// import MyNavBar from '../../components/MyNavBar';\r\n// import {getCurrentCity} from '../../utils';\r\n// import API from '../../utils/api';\r\n// import './index.css';\r\n\r\n// // 城市数据格式化\r\n// function formatCityData (list) {\r\n//     let cityList = {};\r\n//     let  cityIndex = [];\r\n//     // 将城市列表list按照首字母进行分类\r\n//     list.forEach(item => {\r\n//         let firstStr = item.short.substr(0,1);\r\n//         if (cityList[firstStr]) {\r\n//             cityList[firstStr].push(item)\r\n//         } else {\r\n//             cityList[firstStr] = [item]\r\n//         }\r\n//     });\r\n//     // 获取城市列表首字母数组\r\n//     cityIndex = Object.keys(cityList).sort();\r\n\r\n//     return {\r\n//         cityList,\r\n//         cityIndex\r\n//     }\r\n// }\r\n\r\n// // 封装处理字母索引的方法\r\n// function formatCityIndex (letter) {\r\n//     switch (letter) {\r\n//         case '#':\r\n//             return '当前定位'\r\n//         case 'hot':\r\n//             return '热门城市'\r\n//         default:\r\n//             return letter.toUpperCase()\r\n//     }\r\n// }\r\n// // 索引（A、B等）的高度\r\n// const TITLE_HEIGHT = 36;\r\n// // 每个城市名称的高度\r\n// const NAME_HEIGHT = 50;\r\n// // 目前有房源的城市\r\n// // const HOUSE_CITIES = ['北京', '南京', '上海', '广州', '深圳'];\r\n\r\n// export default class CityList extends Component {\r\n//     state = {\r\n//         cityList: {},\r\n//         cityIndex: [],\r\n//         activeIndex: 0\r\n//     }\r\n//     // 获取城市列表数据\r\n//     async getCityList () {\r\n//         const res = await API.get('/area/city?level=1');\r\n//         const {cityList, cityIndex}  = formatCityData(res.data.body);\r\n\r\n//         // 获取热门城市,并添加至数据中\r\n//         const hotCities = await API.get('/area/hot');\r\n//         cityList['hot'] = hotCities.data.body;\r\n//         cityIndex.unshift('hot');\r\n\r\n//         // 获取当前定位城市\r\n//         const currentCity = await getCurrentCity();\r\n//         cityList['#'] = [currentCity];\r\n//         cityIndex.unshift('#');\r\n\r\n//         this.setState({\r\n//             cityList,\r\n//             cityIndex\r\n//         })\r\n//         // 数据结构：\r\n//         // cityList: {\"#\": [{}, {}...], \"hot\": [{},...], \"a\": [{}, {},...], ...}\r\n//         // cityIndex: [\"#\", \"hot\", \"a\",\"b\", \"c\",..., \"z\"]\r\n//     }\r\n\r\n//     // List组件渲染每一行的方法：\r\n//     rowRenderer = ({\r\n//         key, // Unique key within array of rows\r\n//         index, // 索引号\r\n//         isScrolling, // 当前项是否正在滚动中\r\n//         isVisible, // 当前项在 List 中是可见的\r\n//         style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n//     }) => {\r\n//         // 获取每一行的字母索引\r\n//         const { cityIndex, cityList } = this.state;\r\n//         // 字母索引\r\n//         const letter = cityIndex[index];\r\n\r\n//         return (\r\n//             <div key={key} style={style} className=\"city\">\r\n//                 <div className=\"title\">{formatCityIndex(letter)}</div>\r\n//                 {\r\n//                     // 渲染指定字母索引下的城市列表数据\r\n//                     cityList[letter].map( item => (\r\n//                         <div className=\"name\" key={item.value} onClick={() => this.changeCity(item)}>\r\n//                             {item.label}\r\n//                         </div>\r\n//                     ))\r\n//                 }\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     // 用于获取List 组件中渲染行的信息\r\n//     rowsRendered = ({startIndex}) => {\r\n//         // startIndex 当前城市列表顶部的索引号\r\n//         if (startIndex !== this.state.activeIndex) {\r\n//             this.setState({\r\n//                 activeIndex: startIndex\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     // 创建动态计算每一行高度的方法\r\n//     getRowHeight = ({ index }) => {\r\n//         // 索引标题高度 + 城市数量 * 城市名称的高度\r\n//         // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n//         const { cityList, cityIndex } = this.state\r\n//         return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n//     }\r\n\r\n//     // 封装渲染右侧索引列表的方法\r\n//     renderCityIndex() {\r\n//         // 获取到 cityIndex，并遍历其，实现渲染\r\n//         const { cityIndex, activeIndex } = this.state\r\n//         return cityIndex.map((item, index) => (\r\n//             <li\r\n//                 className=\"city-index-item\"\r\n//                 key={item}\r\n//                 onClick={() => {\r\n//                     this.cityListComponent.scrollToRow(index)\r\n//                 }}\r\n//             >\r\n//                 <span className={activeIndex === index ? 'index-active' : ''}>\r\n//                 {item === 'hot' ? '热' : item.toUpperCase()}\r\n//                 </span>\r\n//             </li>\r\n//         ))\r\n//     }\r\n\r\n//     // 点击切换城市\r\n//     changeCity (city) {\r\n//         const {label, value} = city;\r\n//         // if (HOUSE_CITIES.includes(label)) {\r\n//         //     // 将城市数据存储到本地\r\n//         //     localStorage.setItem('zfy_city', JSON.stringify({label, value}));\r\n//         //     this.props.history.goBack();\r\n//         // } else {\r\n//         //     Toast.info('该城市暂无房源', 1, null, false)\r\n//         // }\r\n//         localStorage.setItem('zfy_city', JSON.stringify({label, value}));\r\n//         this.props.history.goBack();\r\n//     }\r\n\r\n//     async componentDidMount () {\r\n//         await this.getCityList();\r\n//         /* 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\r\n//         注意：调用这个方法的时候，需要保证 List 组件中已经有数据了！如果 List 组件中的数据为空，就会导致调用方法报错！\r\n//         解决：只要保证这个方法是在 获取到数据之后 调用的即可。*/\r\n//         this.cityListComponent.measureAllRows();\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div className=\"citylist\">\r\n//                 <MyNavBar>\r\n//                     城市选择\r\n//                 </MyNavBar>\r\n//                 {/* 城市列表 */}\r\n//                 <AutoSizer>\r\n//                 {({ width, height }) => (\r\n//                     <List\r\n//                     ref={(c) => this.cityListComponent = c}\r\n//                     width={width}\r\n//                     height={height}\r\n//                     rowCount={this.state.cityIndex.length}\r\n//                     rowHeight={this.getRowHeight}\r\n//                     rowRenderer={this.rowRenderer}\r\n//                     onRowsRendered={this.rowsRendered}\r\n//                     scrollToAlignment=\"start\"\r\n//                     />\r\n//                 )}\r\n//                 </AutoSizer>\r\n//                 {/* 右侧索引列表 */}\r\n//                 <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { AutoSizer, List } from \"react-virtualized\";\r\nimport MyNavBar from \"../../components/MyNavBar\";\r\nimport { getCurrentCity } from \"../../utils\";\r\nimport API from \"../../utils/api\";\r\nimport \"./index.css\";\r\n\r\n// 城市数据格式化\r\nfunction formatCityData(list) {\r\n  let cityList = {};\r\n  let cityIndex = [];\r\n  // 将城市列表list按照首字母进行分类\r\n  list.forEach((item) => {\r\n    let firstStr = item.short.substr(0, 1);\r\n    if (cityList[firstStr]) {\r\n      cityList[firstStr].push(item);\r\n    } else {\r\n      cityList[firstStr] = [item];\r\n    }\r\n  });\r\n  // 获取城市列表首字母数组\r\n  cityIndex = Object.keys(cityList).sort();\r\n\r\n  return {\r\n    cityList,\r\n    cityIndex,\r\n  };\r\n}\r\n\r\n// 封装处理字母索引的方法\r\nfunction formatCityIndex(letter) {\r\n  switch (letter) {\r\n    case \"#\":\r\n      return \"当前定位\";\r\n    case \"hot\":\r\n      return \"热门城市\";\r\n    default:\r\n      return letter.toUpperCase();\r\n  }\r\n}\r\n// 索引（A、B等）的高度\r\nconst TITLE_HEIGHT = 36;\r\n// 每个城市名称的高度\r\nconst NAME_HEIGHT = 50;\r\n// 目前有房源的城市\r\n// const HOUSE_CITIES = ['北京', '南京', '上海', '广州', '深圳'];\r\n\r\nexport default function CityList(props) {\r\n  const [cityList, setcityList] = useState({});\r\n  const [cityIndex, setcityIndex] = useState([]);\r\n  const [activeIndex, setactiveIndex] = useState(0);\r\n  const cityListComponent = useRef(null);\r\n  // 获取城市列表数据\r\n  useEffect(() => {\r\n    const getCityList = async () => {\r\n      const res = await API.get(\"/area/city?level=1\");\r\n      const { cityList, cityIndex } = formatCityData(res.data.body);\r\n\r\n      // 获取热门城市,并添加至数据中\r\n      const hotCities = await API.get(\"/area/hot\");\r\n      cityList[\"hot\"] = hotCities.data.body;\r\n      cityIndex.unshift(\"hot\");\r\n\r\n      // 获取当前定位城市\r\n      const currentCity = await getCurrentCity();\r\n      cityList[\"#\"] = [currentCity];\r\n      cityIndex.unshift(\"#\");\r\n      setcityList(cityList);\r\n      setcityIndex(cityIndex);\r\n      cityListComponent.current.measureAllRows();\r\n    };\r\n    getCityList();\r\n  }, []);\r\n\r\n  // List组件渲染每一行的方法：\r\n  const rowRenderer = ({ key, index, style }) => {\r\n    // 字母索引\r\n    const letter = cityIndex[index];\r\n\r\n    return (\r\n      <div key={key} style={style} className=\"city\">\r\n        <div className=\"title\">{formatCityIndex(letter)}</div>\r\n        {\r\n          // 渲染指定字母索引下的城市列表数据\r\n          cityList[letter].map((item) => (\r\n            <div\r\n              className=\"name\"\r\n              key={item.value}\r\n              onClick={() => changeCity(item)}\r\n            >\r\n              {item.label}\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 用于获取List 组件中渲染行的信息\r\n  const rowsRendered = ({ startIndex }) => {\r\n    // startIndex 当前城市列表顶部的索引号\r\n    if (startIndex !== activeIndex) {\r\n      setactiveIndex(startIndex);\r\n    }\r\n  };\r\n\r\n  // 创建动态计算每一行高度的方法\r\n  const getRowHeight = ({ index }) => {\r\n    return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT;\r\n  };\r\n\r\n  // 封装渲染右侧索引列表的方法\r\n  const renderCityIndex = () => {\r\n    // 获取到 cityIndex，并遍历其，实现渲染\r\n    return cityIndex.map((item, index) => (\r\n      <li\r\n        className=\"city-index-item\"\r\n        key={item}\r\n        onClick={() => {\r\n          cityListComponent.current.scrollToRow(index);\r\n        }}\r\n      >\r\n        <span className={activeIndex === index ? \"index-active\" : \"\"}>\r\n          {item === \"hot\" ? \"热\" : item.toUpperCase()}\r\n        </span>\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  // 点击切换城市\r\n  const changeCity = (city) => {\r\n    const { label, value } = city;\r\n    localStorage.setItem(\"zfy_city\", JSON.stringify({ label, value }));\r\n    props.history.goBack();\r\n  };\r\n  return (\r\n    <div className=\"citylist\">\r\n      <MyNavBar>城市选择</MyNavBar>\r\n      {/* 城市列表 */}\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            ref={cityListComponent}\r\n            width={width}\r\n            height={height}\r\n            rowCount={cityIndex.length}\r\n            rowHeight={getRowHeight}\r\n            rowRenderer={rowRenderer}\r\n            onRowsRendered={rowsRendered}\r\n            scrollToAlignment=\"start\"\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n      {/* 右侧索引列表 */}\r\n      <ul className=\"city-index\">{renderCityIndex()}</ul>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}